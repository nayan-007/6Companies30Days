QUESTION:
--------

  In the stock market, a person buys a stock and sells it on some future date. 
  Given the stock prices of N days in an array A[ ] and a positive integer K, 
  find out the maximum profit a person can make in at-most K transactions. 
  A transaction is equivalent to (buying + selling) of a stock and new transaction can start only when the previous transaction has been completed.


Example 1:
----------

  Input: K = 2, N = 6
  A = {10, 22, 5, 75, 65, 80}
  Output: 87
  Explaination: 
  1st transaction: buy at 10 and sell at 22. 
  2nd transaction : buy at 5 and sell at 80.
  
  
Example 2:
----------


  Input: K = 3, N = 4
  A = {20, 580, 420, 900}
  Output: 1040
  Explaination: The trader can make at most 2 
  transactions and giving him a profit of 1040.
  
  
Example 3:
----------

  Input: K = 1, N = 5
  A = {100, 90, 80, 50, 25}
  Output: 0
  Explaination: Selling price is decreasing 
  daily. So seller cannot have profit.
  

************************************************
Expected Time Complexity: O(N*K)
Expected Auxiliary Space: O(N*K)
*************************************************

Constraints:
------------
  1 ≤ N ≤ 500
  1 ≤ K ≤ 200
  1 ≤ A[ i ] ≤ 1000
  
  
----------------------------------------------------------------------------------------------------------------------------------

SOLUTION:
---------



class Solution {
  public:
    int maxProfit(int k, int n, int A[]) {
        // code here
        int dp[k+1][n];
        memset(dp,0,sizeof(dp));
        int max_so_far;
        
        for(int i=1;i<=k;i++){
            max_so_far=INT_MIN;
            
            for(int j=1;j<n;j++){
                max_so_far=max(max_so_far,dp[i-1][j-1]-A[j-1]);
                dp[i][j]=max(dp[i][j-1],max_so_far+A[j]);
            }
        }
        return dp[k][n-1];
    }
};
