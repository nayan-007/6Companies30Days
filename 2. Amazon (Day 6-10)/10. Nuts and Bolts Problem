QUESTION:
---------

  Given a set of N nuts of different sizes and N bolts of different sizes. 
  There is a one-one mapping between nuts and bolts. Match nuts and bolts efficiently.

  Comparison of a nut to another nut or a bolt to another bolt is not allowed. 
  It means nut can only be compared with bolt and bolt can only be compared with nut to see which one is bigger/smaller.
  The elements should follow the following order ! # $ % & * @ ^ ~ .

Example 1:
----------

  Input: 
  N = 5
  nuts[] = {@, %, $, #, ^}
  bolts[] = {%, @, #, $ ^}
  Output: 
  # $ % @ ^
  # $ % @ ^
  
  
Example 2:
----------


  Input: 
  N = 9
  nuts[] = {^, &, %, @, #, *, $, ~, !}
  bolts[] = {~, #, @, %, &, *, $ ,^, !}
  Output: 
  ! # $ % & * @ ^ ~
  ! # $ % & * @ ^ ~
  


--------------------------------------------------------------------------------------------------------------------------------------------------
  
SOLUTION:
---------



class Solution{
public:	

	void matchPairs(char nuts[], char bolts[], int n) {
	    char arr[9]= {'0','0','0','0','0','0','0','0','0'};
	    
	    for(int i=0;i<n;i++){
	        if(nuts[i]=='!')      arr[0]='!';
	        else if(nuts[i]=='#') arr[1]='#';
	        else if(nuts[i]=='$') arr[2]='$';
	        else if(nuts[i]=='%') arr[3]='%';
	        else if(nuts[i]=='&') arr[4]='&';
	        else if(nuts[i]=='*') arr[5]='*';
	        else if(nuts[i]=='@') arr[6]='@';
	        else if(nuts[i]=='^') arr[7]='^';
	        else if(nuts[i]=='~') arr[8]='~';
	    }
	    
	    int count =0;
	    
	    for(int i=0;i<9;i++){
	        if(arr[i]!='0'){
	            nuts[count]=arr[i];
	            bolts[count]=arr[i];
	            count++;
	        }
	    }
	}

};
