QUESTION:
--------

  You may recall that an array arr is a mountain array if and only if:

  arr.length >= 3
  There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
  arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
  arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
  Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

 

Example 1:
----------

  Input: arr = [2,1,4,7,3,2,5]
  Output: 5
  Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
  
  
Example 2:
----------

  Input: arr = [2,2,2]
  Output: 0
  Explanation: There is no mountain.
 

Constraints:
-----------

  1 <= arr.length <= 104
  0 <= arr[i] <= 104
  
  
  ------------------------------------------------------------------------------------------------------------------------------------------------------
  
SOLUTION:
---------

    int longestMountain(vector<int>& arr) {
          int i=1,mx=0,n=arr.size();
          while(i<n){
              int l=0,r=0;
              while(i<n && arr[i-1]==arr[i])i++;
              while(i<n && arr[i]>arr[i-1]){
                  i++;
                  l++;
              }
              while(i<n && arr[i]<arr[i-1]){
                  i++;
                  r++;
              }
              if(l&&r&&r+l+1>mx)mx=r+l+1;
          }
          return mx;
      }
      
      TC: O(N)
