QUESTION:
----------

  There are N stairs, and a person standing at the bottom wants to reach the top. 
  The person can climb either 1 stair or 2 stairs at a time. Count the number of ways, 
  the person can reach the top (order does not matter).
  Note: Order does not matter means for n=4 {1 2 1},{2 1 1},{1 1 2} are considered same.

Example 1:
----------

  Input:
  N = 4
  Output: 3
  Explanation: You can reach 4th stair in
  3 ways.
  3 possible ways are:
  1, 1, 1, 1
  1, 1, 2
  2, 2
  
Example 2:
---------


  Input:
  N = 5
  Output: 3
  Explanation:
  You may reach the 5th stair in 3 ways.
  The 3 possible ways are:
  1, 1, 1, 1, 1
  1, 1, 1, 2
  1, 2, 2
  
  
---------------------------------------------------------------------------------------------------------------------------------


SOLUTION:
---------


METHOD 1: (DP)
--------------

  class Solution
  {
      public:
      //Function to count number of ways to reach the nth stair 
      //when order does not matter.
      long long countWays(int m)
      {
          long long dp[m + 1] = {0};
          dp[0] = 1;
          for(int i = 1; i <= m; i++){
              dp[i] += dp[i - 1];
          }
          for(int i = 2; i <= m; i++){
              dp[i] += dp[i - 2];
          }
          return dp[m];
      }
  };
  
  TC: O(N)
  SC: O(N)
  
  
-------------------------------------------------------------------------------------------------------------------------------------------

METHOD 2:  O(1) solution
------------------------


  class Solution
  {
      public:
      //Function to count number of ways to reach the nth stair 
      //when order does not matter.
      long long countWays(int m)
      {
          // your code here
          return 1+(m/2);
      }
  };
