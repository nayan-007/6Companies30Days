QUESTION:
---------

  Given a list of contacts contact[] of length n 
  where each contact is a string which exist in a phone directory and a query string s. 
  The task is to implement a search query for the phone directory. 
  Run a search query for each prefix p of the query string s (i.e. from  index 1 to |s|) 
  that prints all the distinct contacts which have the same prefix as p in lexicographical increasing order. 
  Please refer the explanation part for better understanding.
  
  Note: If there is no match between query and contacts, print "0".



Example 1:
---------


  Input: 
  n = 3
  contact[] = {"geeikistest", "geeksforgeeks", 
  "geeksfortest"}
  s = "geeips"
  
  Output:
  
  geeikistest geeksforgeeks geeksfortest
  geeikistest geeksforgeeks geeksfortest
  geeikistest geeksforgeeks geeksfortest
  geeikistest
  0
  0
  
  Explaination: By running the search query on 
  contact list for "g" we get: "geeikistest", 
  "geeksforgeeks" and "geeksfortest".
  By running the search query on contact list 
  for "ge" we get: "geeikistest" "geeksforgeeks"
  and "geeksfortest".
  By running the search query on contact list 
  for "gee" we get: "geeikistest" "geeksforgeeks"
  and "geeksfortest".
  By running the search query on contact list 
  for "geei" we get: "geeikistest".
  No results found for "geeip", so print "0". 
  No results found for "geeips", so print "0".

Expected Time Complexity: O(|s| * n * max|contact[i]|)
Expected Auxiliary Space: O(n * max|contact[i]|)

Constraints:
1 ≤ n ≤ 50
1 ≤ |contact[i]| ≤ 50
1 ≤ |s| ≤ 6 



-----------------------------------------------------------------------------------------------------------------------------------------------


SOLUTION:
--------

class Solution{
private:
    struct Trie{
            
            Trie *child[26] = {};
            
            vector<string> vect;
            
        }*root;
    
        void insertInTrie(string str)
        {
            int n = str.size();
            
            Trie *curr = root;
            
            for(int i = 0;i < n; i++)
            {
                char x = str[i];
                
                if(curr->child[x - 'a'])
                {
                    curr = curr->child[x - 'a'];
                    
                    curr->vect.push_back(str);
                }
                
                else
                {
                    Trie *node = new Trie;
                    
                    node->vect.push_back(str);
                    
                    curr->child[x - 'a'] = node;
                    
                    curr = node;
                }
            }
        }
    
        void constructTrie(string contact[], int n)
        {
            unordered_set<string> ms;
            
            for(int i = 0;i < n; i++)
            {
                if(!ms.count(contact[i]))
                {
                    ms.insert(contact[i]);
                    insertInTrie(contact[i]);
                }
            }
        }
    
        vector<vector<string>> solve(string str)
        {
            Trie *curr = root;
            
            vector<vector<string>> res;
            
            for(int i = 0; i < str.size(); i++)
            {
                char x = str[i];
                
                if(!curr->child[x - 'a'])
                {
                    while(i < str.size())
                    {
                        res.push_back({"0"});
                        ++i;
                    }
                }
                
                else
                {
                    curr = curr->child[x - 'a'];
                    
                    vector<string> v = curr->vect;
                    
                    sort(v.begin(), v.end());
                    
                    res.push_back(v);
                }
            }
            
            return res;
        }
        
public:
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        // code here
        root = new Trie;
        
        constructTrie(contact, n);
        
        return solve(s);
    }
};
