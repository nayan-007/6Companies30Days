QUESTION:
--------

  Given a matrix of size r*c. Traverse the matrix in spiral form.


Example 1:
----------


  Input:
  r = 4, c = 4
  matrix[][] = {{1, 2, 3, 4},
             {5, 6, 7, 8},
             {9, 10, 11, 12},
             {13, 14, 15,16}}
  Output: 
  1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
  

Example 2:
----------


  Input:
  r = 3, c = 4  
  matrix[][] = {{1, 2, 3, 4},
             {5, 6, 7, 8},
             {9, 10, 11, 12}}
  Output: 
  1 2 3 4 8 12 11 10 9 5 6 7
  

Expected Time Complexity: O(r*c)
Expected Auxiliary Space: O(r*c), for returning the answer only.

Constraints:
1 <= r, c <= 100
0 <= matrixi <= 100



--------------------------------------------------------------------------------------------------------

SOLUTION:
--------


class Solution
{   
public:     
    vector<int> spirallyTraverse(vector<vector<int> > a, int m, int n) 
    {
        // code here 
        int i, k = 0, l = 0; 
  
    /* k - starting row index 
        m - ending row index 
        l - starting column index 
        n - ending column index 
        i - iterator 
    */
    vector<int>res;
    while (k < m && l < n) { 
        /* Print the first row from 
               the remaining rows */
        for (i = l; i < n; ++i) { 
            res.push_back( a[k][i]); 
        } 
        k++; 
  
        /* Print the last column 
         from the remaining columns */
        for (i = k; i < m; ++i) { 
            res.push_back(a[i][n - 1]); 
        } 
        n--; 
  
        /* Print the last row from 
                the remaining rows */
        if (k < m) { 
            for (i = n - 1; i >= l; --i) { 
                res.push_back(a[m - 1][i]); 
            } 
            m--; 
        } 
  
        /* Print the first column from 
                   the remaining columns */
        if (l < n) { 
            for (i = m - 1; i >= k; --i) { 
                res.push_back(a[i][l]); 
            } 
            l++; 
        } 
    } 
    return res;
        
        
    }
};
