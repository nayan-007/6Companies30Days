PROBLEM:
--------

  There are a total of N tasks, labeled from 0 to N-1. 
  Some tasks may have prerequisites, for example to do task 0 you have to first complete task 1, which is expressed as a pair: [0, 1]
  Given the total number of tasks N and a list of prerequisite pairs P, find if it is possible to finish all tasks.



Example 1:
----------


  Input: 
  N = 4, P = 3
  prerequisites = {{1,0},{2,1},{3,2}}
  Output:
  Yes
  Explanation:
  To do task 1 you should have completed
  task 0, and to do task 2 you should 
  have finished task 1, and to do task 3 you 
  should have finished task 2. So it is possible.
  
  
Example 2:
---------

  Input:
  N = 2, P = 2
  prerequisites = {{1,0},{0,1}}
  Output:
  No
  Explanation:
  To do task 1 you should have completed
  task 0, and to do task 0 you should
  have finished task 1. So it is impossible.
  
  
  
-------------------------------------------------------------------------------------------------------------------------------------


SOLUTION:
---------


class Solution {
public:
    vector<unordered_set<int> > make_graph(int numTasks,
            vector<pair<int, int> >& prerequisites)
    
    {
        vector<unordered_set<int> > graph(numTasks);
        for (auto pre : prerequisites)
            graph[pre.second].insert(pre.first);
        return graph;
    }
    
    bool dfs_cycle(vector<unordered_set<int> >& graph, int node,
                   vector<bool>& onpath, vector<bool>& visited)
    {
        if (visited[node])
            return false;
        onpath[node] = visited[node] = true;
        for (int neigh : graph[node])
            if (onpath[neigh] || dfs_cycle(graph, neigh, onpath, visited))
                return true;
        return onpath[node] = false;
    }
    bool canFinish(int numTasks, vector<pair<int, int> >& prerequisites)
    {
        vector<unordered_set<int> > graph = make_graph(numTasks, prerequisites);
        vector<bool> onpath(numTasks, false), visited(numTasks, false);
        for (int i = 0; i < numTasks; i++)
            if (!visited[i] && dfs_cycle(graph, i, onpath, visited))
                return false;
        return true;
    }
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    return canFinish(N,prerequisites);
	}
};
