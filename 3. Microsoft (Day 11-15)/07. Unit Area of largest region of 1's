QUESTION:
---------

Given a grid of dimension nxm containing 0s and 1s. Find the unit area of the largest region of 1s.
Region of 1's is a group of 1's connected 8-directionally (horizontally, vertically, diagonally).
 

Example 1:
------------

  Input: grid = {{1,1,1,0},{0,0,1,0},{0,0,0,1}}
  Output: 5
  Explanation: The grid is-
  1 1 1 0
  0 0 1 0
  0 0 0 1
  The largest region of 1's is colored
  in orange.
  
  
Example 2:
----------


  Input: grid = {{0,1}}
  Output: 1
  Explanation: The grid is-
  0 1
  The largest region of 1's is colored in 
  orange.



Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)
 

Constraints:
1 ≤ n, m ≤ 500



----------------------------------------------------------------------------------------------------------------


SOLUTION:
----------
class Solution
{
    
    private:
    
    void bfs(int i, int j, vector<vector<int>> &grid, int &cnt, int n, int m){
        queue<pair<int,int>> q;
        q.push({i,j});
        vector<pair<int,int>> dir={{-1,0},{1,0},{0,1},{0,-1},{-1,-1},{1,1},{-1,1},{1,-1}};
        
        while(!q.empty()){
            pair<int,int> node=q.front();
            q.pop();
            cnt++;
            for(int i=0;i<dir.size();i++){
                int x= node.first + dir[i].first;
                int y= node.second + dir[i].second;
                
                if(x>=n || x<0 || y>=m || y<0 || grid[x][y]!=1) 
                    continue;
                grid[x][y]=0;
                q.push({x,y});
            }
        }
        
    }
    
    public:
    //Function to find unit area of the largest region of 1s.
    int findMaxArea(vector<vector<int>>& grid) {
        
        int maxArea=1;
        int n=grid.size();
        int m=grid[0].size();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    int cnt=-1;
                    bfs(i,j,grid,cnt,n,m);
                    maxArea= max(maxArea,cnt);
                }
            }
        }
        return maxArea;
    }
};
