Question:

  Given an array of strings, return all groups of strings that are anagrams. 
  The groups must be created in order of their appearance in the original array

Example 1:
 Input:
 N = 5
 words[] = {act,god,cat,dog,tac}

 Output: 
 god dog
 act cat tac

 Explanation:
 There are 2 groups of
 anagrams "god", "dog" make group 1.
 "act", "cat", "tac" make group 2.
 
 
Example 2:
 Input:
 N = 3
 words[] = {no,on,is}

 Output: 
 no on
 is

 Explanation:
 There are 2 groups of
 anagrams "no", "on" make group 1.
 "is" makes group 2.





Solution:

//Initial Template for C++
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;


 // } Driver Code Ends
//User function Template for C++

class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& strs) {
        
        /*
           //METHOD 1 : TC : O( n^2 logn)
            unordered_map<string, vector<string>> m;
           vector<vector<string>> res;
            if(strs.size()==0) return res;
            for(auto it: strs){
                string s=it;
                sort(s.begin(),s.end());
                m[s].push_back(it);
            }
            for(auto it: m) res.push_back(it.second);
            return res;
            
        */
        
        
                //METHOD 2- TC : O(n^2)
                
        map<vector<int>,vector<string> > mp;
        int n=strs.size();
        
        for(int i=0;i<n;i++){
            vector<int>freq(26,0);
            string str=strs[i];
            for(int j=0;j<str.size();j++){
                freq[str[j]-'a']++;
            }
            //cout<<freq<<endl;
            
            mp[freq].push_back(str);
        }
        
        vector<vector<string>> res;
        
        for(auto &it : mp)
            res.push_back(it.second);
        return res;
        
    }
};

// { Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<string> string_list(n);
        for (int i = 0; i < n; ++i)
            cin>>string_list[i]; 
        Solution ob;
        vector<vector<string> > result = ob.Anagrams(string_list);
        sort(result.begin(),result.end());
        for (int i = 0; i < result.size(); i++)
        {
            for(int j=0; j < result[i].size(); j++)
            {
                cout<<result[i][j]<<" ";
            }
            cout<<"\n";
        }
    }

    return 0;
}
  // } Driver Code Ends
