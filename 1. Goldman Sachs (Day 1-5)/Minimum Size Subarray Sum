QUESTION:
----------

  Given an array of positive integers nums and a positive integer target, 
  return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target.
  If there is no such subarray, return 0 instead.

 

Example 1:
----------

  Input: target = 7, nums = [2,3,1,2,4,3]
  Output: 2
  Explanation: The subarray [4,3] has the minimal length under the problem constraint.
  
  
Example 2:
----------

  Input: target = 4, nums = [1,4,4]
  Output: 1
  
  
Example 3:
----------

  Input: target = 11, nums = [1,1,1,1,1,1,1,1]
  Output: 0
 

Constraints:
------------

  1 <= target <= 109
  1 <= nums.length <= 105
  1 <= nums[i] <= 105
  
  
  
  
  
  
------------------------------------------------------------------------

SOLUTION:
---------

  class Solution {

  private:

      bool is_possible(vector<int> sum,int target,int subSize)
      {
          for(int i=0;i<sum.size()-subSize;i++)
          {
              if(sum[i+subSize]-sum[i]>=target)
                  return true;
          }

          return false;
      }
  public:

      int minSubArrayLen(int target, vector<int>& nums) {
          int n=nums.size();
          vector<int> sum;
          sum.push_back(0);

          for(int i=1;i<n+1;i++)
              sum.push_back(sum[i-1]+nums[i-1]);
          int l=1,h=n;
          int res=0;
          while(l<=h){
              int m=l+(h-l)/2;
              if(is_possible(sum,target,m)){
                  res=m;
                  h=m-1;
              } 
              else l=m+1;

          }

          return res;

      }
  };
  
  TC: O(N* logN)
