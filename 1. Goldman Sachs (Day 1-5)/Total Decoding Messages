QUESTION :
----------

  A top secret message containing letters from A-Z is being encoded to numbers using the following mapping:

  'A' -> 1
  'B' -> 2
  ...
  'Z' -> 26
  You are an FBI agent. You have to determine the total number of ways that message can be decoded, as the answer can be large return the answer modulo 109 + 7.
  Note: An empty digit sequence is considered to have one decoding. 
        It may be assumed that the input contains valid digits from 0 to 9 and If there are leading 0’s, 
        extra trailing 0’s and two or more consecutive 0’s then it is an invalid string.
        
-------------------------------------------------------

Example 1:

  Input: str = "123"
  Output: 3
  Explanation: "123" can be decoded as "ABC"(123),
  "LC"(12 3) and "AW"(1 23).

-------------------------------------------------------

Example 2:

  Input: str = "27"
  Output: 1
  Explanation: "27" can be decoded as "BG".
  
  
----------------------------------------------------------------------------------------------------------------------------------------------------------------  
  
SOLUTION:
---------


            METHOD 1: (RECURSION -  TC: Exponential)
            
   class Solution {
    private:
        int count(string str, int n){
            if(n==0 || n==1)
                return 1;
            if(str[0]=='0')
                return 0;
                
            int cnt=0;
            
            if(str[n-1]>'0')
                cnt+= count(str,n-1);
            
            if(str[n-2]=='1' || (str[n-2]=='2' && str[n-1]<='6'))
                cnt+= count(str,n-2);
                
            return cnt;
        }
    public:
      int CountWays(string str){
          int n=str.size();
          if(n==0 || (n==1 && str[0]=='0'))
              return 0;
          return count(str,n);
      }

  };
  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------  
  
          METHOD 2: [ DP - TC: O(N) ] 
          
          
    class Solution {
   
	public:
		int CountWays(string str){
		    int n=str.size();
		    vector<int> dp(n+1,0);
		    
		    dp[0]=1;
		    dp[1]=1;
            
		    if(str[0]=='0')
			return 0;

		    for(int i=2;i<=n;i++){
			if(str[i-1]>'0')
			    dp[i]+= dp[i-1];

			if(str[i-2]=='1' || (str[i-2]=='2' && str[i-1]<='6'))
			    dp[i]+= dp[i-2];

			dp[i]%= 1000000007;
		    }    


		    return dp[n]%1000000007;
			}

	};
