QUESTION:
---------

Given an array of integers and a number k, 
write a function that returns true if given array can be divided into pairs such that sum of every pair is divisible by k.
 

Example 1 :
----------

  Input : arr = [9, 5, 7, 3], k = 6
  Output: True
  Explanation: {(9, 3), (5, 7)} is a 
  possible solution. 9 + 3 = 12 is divisible
  by 6 and 7 + 5 = 12 is also divisible by 6.

Example 2:
----------

  Input : arr = [2, 4, 1, 3], k = 4
  Output: False
  Explanation: There is no possible solution.
  
  
---------------------------------------------------------------------------------------------------------------------------------------------------



SOLUTION:
---------

bool canPair(vector<int> arr, int k) {
        // Code here.
        int n=arr.size();
        
        if(n%2!=0)
            return false;
        
        // Create a frequency array to count occurrences
        // of all remainders when divided by k.
        //(use (arr[i] % k)+k)%k for handling the case of negative integers as well)
        unordered_map<int, int> freq;
    
        // Count occurrences of all remainders
        for (int i = 0; i < n; i++)
            freq[((arr[i] % k) + k) % k]++; 
            
            
            
        // Traverse input array and use freq[] to decide
        // if given array can be divided in pairs
        for (int i = 0; i < n; i++) {
            // Remainder of current element
            int rem = ((arr[i] % k) + k) % k;
    
            // If remainder with current element divides
            // k into two halves.
            if (2 * rem == k) {
                // Then there must be even occurrences of
                // such remainder
                if (freq[rem] % 2 != 0)
                    return false;
            }
    
            // If remainder is 0, then there must be even 
            // number of elements with 0 remainder
            else if (rem == 0) {
                if (freq[rem] & 1)
                    return false;
            }
    
            // Else number of occurrences of remainder
            // must be equal to number of occurrences of
            // k - remainder
            else if (freq[rem] != freq[k - rem])
                return false;
        }
        return true;
    }
    
    
    
   TC: O(N)
